<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Senthil Kumaran (Posts about software)</title><link>http://www.xtoinfinity.com/</link><description></description><atom:link href="http://www.xtoinfinity.com/categories/software.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Thu, 05 Dec 2019 23:59:06 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Stephen Brennan Tutorial on writing a shell</title><link>http://www.xtoinfinity.com/posts/stephen-brennan-tutorial-on-writing-a-shell.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;After learning to program in C language, the next best thing to attempt will be writing some small utility in C.
I landed upon a great tutorial (&lt;a class="reference external" href="https://brennan.io/2015/01/16/write-a-shell-in-c/"&gt;https://brennan.io/2015/01/16/write-a-shell-in-c/&lt;/a&gt;) that taught how to write a shell with some builtin utilities in C. I &lt;a class="reference external" href="https://github.com/orsenthil/simple-shell"&gt;tried&lt;/a&gt; that tutorial today and saw how to build a shell.&lt;/p&gt;
&lt;p&gt;That's the best way to learn about the init, fork, parent process, child process and the shell loop itself.
As a side-effect, I also setup and used &lt;a class="reference external" href="https://www.jetbrains.com/clion/"&gt;CLion&lt;/a&gt;  on my computer.&lt;/p&gt;&lt;/div&gt;</description><category>software</category><category>tutorial</category><guid>http://www.xtoinfinity.com/posts/stephen-brennan-tutorial-on-writing-a-shell.html</guid><pubDate>Sat, 31 Dec 2016 01:39:14 GMT</pubDate></item><item><title>Deis Illustrated Guide to Kubernetes</title><link>http://www.xtoinfinity.com/posts/deis-illustrated-guide-to-kubernetes.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;img alt="https://dl.dropbox.com/s/jqh03qsqpbtf2pm/deis_kubernetes.png" class="align-center" src="https://dl.dropbox.com/s/jqh03qsqpbtf2pm/deis_kubernetes.png" style="width: 450px; height: 300px;"&gt;
&lt;p&gt;Deis had published an easy to understand version of Kubernetes guide calling &lt;a class="reference external" href="https://deis.com/phippy/The-Illustrated-Childrens-Guide-to-Kubernetes.pdf"&gt;Children's Illustrated Guide to Kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It explains Containers and the need for container management pretty well. It focuses on Kubernetes. There are other
container orchestration systems like &lt;a class="reference external" href="https://dcos.io"&gt;DCOS&lt;/a&gt; that provide the same capabilities of container orchestration as explained
in that guide.&lt;/p&gt;
&lt;p&gt;The character rendering, which include, PHP app as a giraffe, Kubernetes as a ship captain, docker as whale, gopher as
go lang app, elephant as postgresql app were great.&lt;/p&gt;
&lt;div class="youtube-video align-center"&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/4ht22ReBjno?rel=0&amp;amp;wmode=transparent" frameborder="0" allow="encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>containers</category><category>kubernetes</category><category>software</category><guid>http://www.xtoinfinity.com/posts/deis-illustrated-guide-to-kubernetes.html</guid><pubDate>Fri, 30 Dec 2016 20:30:59 GMT</pubDate></item><item><title>Documenting projects can reveal code/ design bugs.</title><link>http://www.xtoinfinity.com/posts/documenting-projects-can-reveal-code-design-bugs.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;Stumbled upon this LWN.net entry written by a Linux man-pages contributor. The main point of this
article was, documenting software projects quite early on can reveal important design and code
bugs. This presented three examples of how a feature in &lt;strong&gt;inotify&lt;/strong&gt; call was introduced, but was
found not working while documenting it. Similar example was given for &lt;em&gt;splice&lt;/em&gt; and &lt;em&gt;timerfd&lt;/em&gt; calls&lt;/p&gt;
&lt;p&gt;Read the full article here: &lt;a class="reference external" href="http://lwn.net/Articles/247788/"&gt;http://lwn.net/Articles/247788/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>http://www.xtoinfinity.com/posts/documenting-projects-can-reveal-code-design-bugs.html</guid><pubDate>Thu, 30 Jun 2016 18:20:14 GMT</pubDate></item><item><title>Meeting with Bram Cohen</title><link>http://www.xtoinfinity.com/posts/2013/04/04/meeting-with-bram-cohen.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;During PyCon Sprints, I met &lt;a href="http://en.wikipedia.org/wiki/Bram_Cohen"&gt;Bram Cohen&lt;/a&gt; who had come down to talk to Guido and have a word on networking protocol world. It was interesting to see two experts talking. Later I invited Bram to give a tech talk at Twitter. Bram gladly accepted it and came to Twitter office to talk to us about his latest invention http://live.bittorrent.com He had been working on Distributed Live Streaming for few years and thought it was a hard problem to solve. He could dedicate himself to it and came out with live.bittorrent.com - Using this anyone can live stream a video. You can become a live video publisher too and people all around the word can see your channel in real time. This is a huge break through. My experience at Akamai helps me realize the kind of break through this can bring to real time live streaming.  &lt;/p&gt;
&lt;p&gt;Bram went with the technical aspects of the design of the live bittorrent technology and how to keep the delays as minimum as possible. He was talking at the network packets level and explaining how the packets need to be distributed from one node to another so that delay can be as minimum as possible and what are the bottlenecks that exist during the packet transfer. The innovative solutions that he had use to make these possible. He started by giving a pitch to &lt;a href="http://cr.yp.to/djb.html"&gt;Dan Bernstein&lt;/a&gt;'s ciphers and explained about the TCP handshake and udp transfers and how &lt;a href="http://en.wikipedia.org/wiki/Micro_Transport_Protocol"&gt;uTP&lt;/a&gt; goes in the background during transfers and not affect peak real time traffic.  The details could by got only if I read through his spec a couple of times.&lt;/p&gt;
&lt;p&gt;One interesting thing that struck me was. One engineer asked the question, "how did he test his development of live bittorrent system?". Bram got excited to share his valuable experience in doing that. He said, few years ago he made a point saying "Remove all psychic powers in software development" - by this he meant, remove all assumptions that a software will work "magically", "assume" that it work under all conditions, but rather encode the scenarios and simulate all the possible scenarios under which you want your software to work and then run your software through it. To this effect, he seemed to built a small simulator which can help him test the system. That was a good learning and major take away for me from this session.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>software</category><category>technology</category><guid>http://www.xtoinfinity.com/posts/2013/04/04/meeting-with-bram-cohen.html</guid><pubDate>Thu, 04 Apr 2013 15:14:26 GMT</pubDate></item></channel></rss>