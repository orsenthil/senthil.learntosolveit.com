<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Senthil Kumaran (Posts about python)</title><link>http://www.xtoinfinity.com/</link><description></description><atom:link href="http://www.xtoinfinity.com/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 01 Mar 2021 18:42:22 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>CPython moved to Github</title><link>http://www.xtoinfinity.com/posts/cpython-moved-to-github.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;CPython project moved it's source code hosting from self-hosted mercurial repository, at hg.python.org to Git
version control system hosted at Github. The new location of python project is &lt;a class="reference external" href="http://www.github.com/python/cpython"&gt;http://www.github.com/python/cpython&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is second big version control migration that is happening since I got involved. The first one was when
we moved from svn to mercurial. Branches were sub-optimal in svn and we used svn-merge.py to merge across
branches. Mercurial helped there and everyone got used to a distributed version control written in python,
mercurial. It was interesting for me personally to compare mercurial with the other popular DVCS, git.&lt;/p&gt;
&lt;p&gt;Over the years, Github has become popular place for developers to host their
projects. They have constantly improved their service offering. Many python
developers, got used to git version control system and found it's utility value too.&lt;/p&gt;
&lt;p&gt;Two years ago, it was decided that Python will move to Git and Github. The &lt;a class="reference external" href="https://paper.dropbox.com/doc/CPython-workflow-changes-mx1k8G6M0rg5JLy80F1r6"&gt;effort was led by
Bret Cannon&lt;/a&gt;  assisted by number of other developers and the migration happened on Feb 10, 2017.&lt;/p&gt;
&lt;p&gt;I helped with the migration too and helped with providing tool around converting the hg to git, using the facilities
available from hg-git mercurial plugin.&lt;/p&gt;
&lt;p&gt;We made use hg-git, and wrote some conversions scripts that could get us to the converted repo as we wanted.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/orsenthil/cpython-hg-to-git"&gt;https://github.com/orsenthil/cpython-hg-to-git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/orsenthil/hg-git"&gt;https://bitbucket.org/orsenthil/hg-git&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that the migration is done, we are getting ourselves familiar to the new workflow.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://www.xtoinfinity.com/posts/cpython-moved-to-github.html</guid><pubDate>Mon, 20 Feb 2017 15:09:24 GMT</pubDate></item><item><title>Python Programming Patterns</title><link>http://www.xtoinfinity.com/posts/python-programming-patterns.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;I can write idiomatic code both in Python and Java. Sometimes, when working with large teams, I prefer Java over
Python. I am excited by the sturdiness, standardized and elaborate solutions written in Java. It gives me ample
opportunity to learn and understand the world better.&lt;/p&gt;
&lt;p&gt;Python, on the other hand, is a simple language. The rules of usage are very simple. It seems to me that, the driving
force behind python, Guido Van Rossum,  always prefers simplicity over anything else.&lt;/p&gt;
&lt;p&gt;Here are his thoughts on writing python programs that can be fast (quoted verbatim)&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Avoid overengineering datastructures. Tuples are better than objects (try namedtuple too though). Prefer simple fields over getter/setter functions.&lt;/li&gt;
&lt;li&gt;Built-in datatypes are your friends. Use more numbers, strings, tuples, lists, sets, dicts. Also check out the collections library, esp. deque.&lt;/li&gt;
&lt;li&gt;Be suspicious of function/method calls; creating a stack frame is expensive.&lt;/li&gt;
&lt;li&gt;Don't write Java (or C++, or Javascript, ...) in Python.&lt;/li&gt;
&lt;li&gt;Are you sure it's too slow? Profile before optimizing!&lt;/li&gt;
&lt;li&gt;The universal speed-up is rewriting small bits of code in C. Do this only when all else fails.ï»¿&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://plus.google.com/115212051037621986145/posts/HajXHPGN752"&gt;Guido van Rossum&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is best to adopt all these without shame, that is, writing simple programs, using most common data structures. The
above list creates a very low barrier for writing large programs. In addition to the above list, I think, if we ever
write a python program which gets deployed to production, (meaning there is money / life at stake), having it readable,
and having unit-tests and coverage will give confidence in the program. Making this a habit is a hard task, but if
something can be adopted from the good parts of Java world, then the discipline for these hard tasks can be cultivated
in the python world too.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://www.xtoinfinity.com/posts/python-programming-patterns.html</guid><pubDate>Sun, 04 Sep 2016 23:19:13 GMT</pubDate></item><item><title>Python Library: tabulate</title><link>http://www.xtoinfinity.com/posts/python-library-tabulate.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;I prefer to use Restructured Text for my posts, but drawing tables in Restructured text has always been tricky for me.
Getting the columns right, drawing and aligning the bar characters is a frustrating exercise for me.&lt;/p&gt;
&lt;p&gt;The best to draw tables is to then generate it. I've tried ascii art table maker and I have not been very impressed or
successful with it.&lt;/p&gt;
&lt;p&gt;I tried a python library called &lt;a class="reference external" href="https://bitbucket.org/astanin/python-tabulate"&gt;tabulate&lt;/a&gt; &lt;a class="footnote-reference" href="http://www.xtoinfinity.com/posts/python-library-tabulate.html#id1" id="id2"&gt;[1]&lt;/a&gt; which can be used to print the table in restructed text format.
The table could easily be constructed using python data structures like list.&lt;/p&gt;
&lt;p&gt;Here is an example table of Graph applications, which shows the concept graphs, their vertices and edges.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="26%"&gt;
&lt;col width="38%"&gt;
&lt;col width="36%"&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;graph&lt;/th&gt;
&lt;th class="head"&gt;vertex&lt;/th&gt;
&lt;th class="head"&gt;edge&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;communication&lt;/td&gt;
&lt;td&gt;telephone, computer&lt;/td&gt;
&lt;td&gt;fiber optic cable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;circuit&lt;/td&gt;
&lt;td&gt;gate, register, processor&lt;/td&gt;
&lt;td&gt;wire&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;mechanical&lt;/td&gt;
&lt;td&gt;joint&lt;/td&gt;
&lt;td&gt;rod, beam, spring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;financial&lt;/td&gt;
&lt;td&gt;stock, currency&lt;/td&gt;
&lt;td&gt;transactions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;transportation&lt;/td&gt;
&lt;td&gt;street intersection, airport&lt;/td&gt;
&lt;td&gt;highway, airway route&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;internet&lt;/td&gt;
&lt;td&gt;class C network&lt;/td&gt;
&lt;td&gt;connection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;game&lt;/td&gt;
&lt;td&gt;board position&lt;/td&gt;
&lt;td&gt;legal move&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;social relationship&lt;/td&gt;
&lt;td&gt;person, actor&lt;/td&gt;
&lt;td&gt;friendship, movie cast&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;neural network&lt;/td&gt;
&lt;td&gt;neuron&lt;/td&gt;
&lt;td&gt;synapse&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;protein network&lt;/td&gt;
&lt;td&gt;protein&lt;/td&gt;
&lt;td&gt;protein-protein interaction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;molecule&lt;/td&gt;
&lt;td&gt;atom&lt;/td&gt;
&lt;td&gt;bond&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This table was generated using this python program.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.xtoinfinity.com/listings/python/tabulate_example.py.html"&gt;python/tabulate_example.py&lt;/a&gt;  &lt;a class="reference external" href="http://www.xtoinfinity.com/listings/python/tabulate_example.py"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tabulate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tabulate&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;table_header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"graph"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"vertex"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"edge"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-6"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"communication"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"telephone, computer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"fiber optic cable"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"circuit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"gate, register, processor"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"wire"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-8"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"mechanical"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"joint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"rod, beam, spring"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"financial"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"stock, currency"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"transactions"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-10"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"transportation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"street intersection, airport"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"highway, airway route"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"internet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"class C network"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"connection"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-12"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"game"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"board position"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"legal move"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-13"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"social relationship"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"person, actor"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"friendship, movie cast"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-14"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"neural network"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"neuron"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"synapse"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-15"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"protein network"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"protein"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"protein-protein interaction"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-16"&gt;&lt;/a&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"molecule"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"atom"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"bond"&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_3af2e7a1018c49a28cf98f9012e3818d-18"&gt;&lt;/a&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tabulate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;table_header&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tablefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"rst"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I landed upon tabulate when another python library by name &lt;a class="reference external" href="https://ptable.readthedocs.io/en/latest/tutorial.html"&gt;PTable&lt;/a&gt; &lt;a class="footnote-reference" href="http://www.xtoinfinity.com/posts/python-library-tabulate.html#id3" id="id4"&gt;[2]&lt;/a&gt; did not provide a restructured text specific formatting. If you just prefer ASCII tables, then that's a convenient library as well.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.xtoinfinity.com/posts/python-library-tabulate.html#id2"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://bitbucket.org/astanin/python-tabulate"&gt;https://bitbucket.org/astanin/python-tabulate&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="http://www.xtoinfinity.com/posts/python-library-tabulate.html#id4"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://ptable.readthedocs.io/en/latest/tutorial.html"&gt;https://ptable.readthedocs.io/en/latest/tutorial.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;</description><category>python</category><guid>http://www.xtoinfinity.com/posts/python-library-tabulate.html</guid><pubDate>Sun, 21 Aug 2016 05:52:19 GMT</pubDate></item><item><title>Planning</title><link>http://www.xtoinfinity.com/posts/2013/03/05/planning.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Since I like CS and I have not really cracked the Subject Test, I wanted give it a try again. Then I thought I will go through all the aduni.org videos that I have not watched and I have always wanted to watch. Then my thoughts lead me to stuff like topcoder, which I have not competed in for a while and trying to improving my ranking.&lt;/p&gt;&lt;p&gt;But at last, when clearing my Python emails, I saw so much of pending work that has accumulated that I want to work only on Python in a planned manner and not on anything else.&lt;/p&gt;&lt;/div&gt;</description><category>Planning.</category><category>python</category><guid>http://www.xtoinfinity.com/posts/2013/03/05/planning.html</guid><pubDate>Wed, 06 Mar 2013 00:18:35 GMT</pubDate></item><item><title>Py3k PEPS at APAC PyCon</title><link>http://www.xtoinfinity.com/posts/2010/06/15/py3k-peps-at-apac-pycon.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I went to Singapore to attend &lt;a href="http://apac.pycon.org/"&gt;APAC PyCon&lt;/a&gt; and also to meet Shalini. It was a good 4 days for me. I presented a talk on &lt;a href="http://uthcode.sarovar.org/pyconapac10/py3kpepshandout.html"&gt;Py3K PEPS&lt;/a&gt; at APAC Pycon.&lt;/p&gt;
&lt;p&gt;The Conference Experience was very good. I had a chance to meet Mark Hammond and discuss a lot of Windows Related things with him with. His presentation on raindrop, couch db and and his perspective on Windows development was very good.  It was good to meet in person Liew Beng Keat, the organizer of the Conference who had done a lot of hard work to put this together. I also met Steve Holden, who was present along with his wife, I assume they had a good holiday time at SG, as it is a shopper's paradise. It was good to the warmth in Steve's welcome and this makes him a very good organizer, I guess.&lt;/p&gt;
&lt;p&gt;On the first day, the talks I enjoyed the most were Mark's Couch DB talk, wherein I gained good knowledge of JSON based Non-Relational database and a javascript based map-reduce framework. The concept was very interesting. The final talk by Wesley Chun drew in a huge enthusiasm. Wesley did a very nice presentation on Py3k and explaining its features and kind of potrayed the picture that it would take long time for people to move to Py3k. Well, it could be true, but as I debated with him, it would be very good to just potray positively how Py3k is a more symmetrical in many ways that Py2k. His point of view was pragmatism and training for corporations. I tend to agree with him to an extent, but I still believe that for some "good programmer" to start learning Python, Python 3 is a very well designed a symmetrical one rather than Python 2. The libraries and packages will catch up soon.&lt;/p&gt;
&lt;p&gt;I also enjoyed Graham Dumpleton's short pitch on mod_wsgi and flask. I still use mod_python and plan to move to more web-development related libraries soon.&lt;/p&gt;
&lt;p&gt;My presentation on Py3k PEPS was on next day, it went well and was attended by a small interested audience. Following Presentation by Martin Faassen was very good too.  He presented a perspecive on creating libraries, the creative aspect of development of software. Steve Holden's Metaclass Madness talk was enlightening too. It was  short presentation and a consise one. It would good to write an article based on his presentation if its not already there. Because Python Metaclasses are something which does not have a lot of literature around in the web. The Q&amp;amp;A in the Metaclass'es talk was good one, as one person asked as when do the metaclasses take effective if we were to wrap teh private methods ( which was denoted by startswith('__') and and it turned out that Class mangles them to _Classname__privatemethod and the metaclass wrapper comes to affect later only). If I write an article, I shall discuss this in more detail. There are some interesting studies which can be done on Metaclass vs Class decorators. &lt;/p&gt;
&lt;p&gt;I also attended Noufal's game related talk. It was good one which was attended by a sizable audience. He walked through the code and explained the physics of the game. It was good to see that if developing games we can use real world physics in games using libraries, Interesting. Also, I am not sure, how effective showing a lot of code in the talk is effective. It is very difficult to follow through. Somethings slides with less bullets and easily chew-able points make the presentation more grasping and provide useful inputs to the audience. &lt;/p&gt;
&lt;p&gt;The singpass coder's tournament was good one too. I managed to come into Second round. My trials some with functional programming and mis-reading of problem statements cost me some time. But it was a very enjoyable game. A person by name 'Che' from China won the iPad and Noufal got the $100 Amazon Web-services coupon.&lt;/p&gt;
&lt;p&gt;On Both days, Shalini came to pick me up from the conference and we went for a stroll in the nearby park of Fort Canning. It was good to talk, walking in the park and saw a lot of people practicing tai-chi.  On Saturday we visited a lot of friends, inviting them for our marriage reception at Singapore, we also went to Jackie Chan movie, "The Karate Kid", it was fun. I liked the part where the kid shows his dancing skills on DDR to his girlfriend and she in turn amazes him after acting very shy. The concept of kung-fu as a way of life is also good. On Sunday we did some purchasing, spent a wonderful afternoon at home and in the evening I headed back to India.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://www.xtoinfinity.com/posts/2010/06/15/py3k-peps-at-apac-pycon.html</guid><pubDate>Tue, 15 Jun 2010 18:02:00 GMT</pubDate></item><item><title>Greedy vs Non-Greedy in Re - Good Example</title><link>http://www.xtoinfinity.com/posts/2008/12/28/greedy-vs-non-greedy-in-re-good-example.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Here is a good example to explain greedy vs, non-greedy search using module &lt;a href="http://docs.python.org/library/re.html"&gt;re&lt;/a&gt; in Python.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;*?, +?, ??&lt;/p&gt;
&lt;p&gt;The '&lt;em&gt;', '+', and '?' qualifiers are all greedy; they match as much text as possible. Sometimes this behaviour isnât desired; if the RE  is matched against '&amp;lt;H1&amp;gt;title&amp;lt;/H1&amp;gt;', it will match the entire string, and not just '&amp;lt;H1&amp;gt;'. Adding '?' after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched. Using .&lt;/em&gt;? in the previous expression will match only '&amp;lt;H1&amp;gt;'.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://www.xtoinfinity.com/posts/2008/12/28/greedy-vs-non-greedy-in-re-good-example.html</guid><pubDate>Sun, 28 Dec 2008 16:47:00 GMT</pubDate></item><item><title>How identation works for Python programs?</title><link>http://www.xtoinfinity.com/posts/2008/05/29/how-identation-works-for-python-programs.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;It is well explained in &lt;a href="http://www.secnetix.de/~olli/Python/block_indentation.hawk"&gt;this article&lt;/a&gt;.&lt;br&gt;&lt;br&gt;It is the lexical analyzer that takes care of the indentation and not the python parser. Lexical analyzer maintains a stack for the indentation.&lt;br&gt;1) First for no indentation, it would stored 0 in the stack [0]&lt;br&gt;2) Next when any Indentation occurs, it denotes it by token INDENT and pushes the indent value to the stack[0]. Think of it as a beinging { brace in the C program. And if we visualized, the can be only one INDENT statement per line.&lt;br&gt;4) When de-indent occurs in a line, as many values are popped out of the stack as the new reduced indentation till the value on the top of the stack is equal to new indentation (if not equal, error) and for each value popped out a DEDENT token in written. (Like multiple end }} in C)&lt;br&gt;&lt;br&gt;A simple code like this&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;br&gt;&lt;br&gt;if x:&lt;br&gt;   if true:&lt;br&gt;      print 'yes'&lt;br&gt;print 'end'&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;Would be written as:&lt;br&gt;&lt;br&gt;&amp;lt;if&amp;gt;&amp;lt;x&amp;gt;&amp;lt;:&amp;gt;Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  # Stack[0]&lt;br&gt;&amp;lt;INDENT&amp;gt;&amp;lt;if&amp;gt;&amp;lt;true&amp;gt;&amp;lt;:&amp;gt;Â  # Stack [0,4]&lt;br&gt;&amp;lt;INDENT&amp;gt;&amp;lt;print&amp;gt;&amp;lt;'&amp;gt;&amp;lt;yes&amp;gt;&amp;lt;'&amp;gt; # Stack [0,4,8]&lt;br&gt;&amp;lt;DEDENT&amp;gt;&amp;lt;DEDENT&amp;gt;&amp;lt;print&amp;gt;&amp;lt;'&amp;gt;&amp;lt;end&amp;gt;&amp;lt;'&amp;gt; #Stack[0]&lt;br&gt;&lt;br&gt;The parser would just consider the  as &amp;lt;INDENT&amp;gt; as { of the block andÂ  &amp;lt;DEDENT&amp;gt;Â  as } of the block would be able to parse it as logical blocks.&lt;br&gt;&lt;br&gt;&lt;a href="http://www.secnetix.de/~olli/Python/block_indentation.hawk"&gt;That&lt;/a&gt; was a well written article again.&lt;/div&gt;</description><category>python</category><guid>http://www.xtoinfinity.com/posts/2008/05/29/how-identation-works-for-python-programs.html</guid><pubDate>Fri, 30 May 2008 02:02:00 GMT</pubDate></item><item><title>Lambda functions</title><link>http://www.xtoinfinity.com/posts/2007/11/14/lambda-functions.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I often forget the syntax and usage of lambda functions, the following examples should help as a reminder.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; def function(x):&lt;/p&gt;
&lt;p&gt;...     return x*3&lt;/p&gt;
&lt;p&gt;... &lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; function(2)&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; func_with_lambda = lambda x: x*2&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; func_with_lambda(2)&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; (lambda x: x*2)(2)&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://www.xtoinfinity.com/posts/2007/11/14/lambda-functions.html</guid><pubDate>Thu, 15 Nov 2007 01:42:00 GMT</pubDate></item><item><title>Soc application accepted</title><link>http://www.xtoinfinity.com/posts/2007/04/12/soc-application-accepted.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;wow! &lt;a href="http://code.google.com/soc/psf/appinfo.html?csaid=E73A6612F80229B6"&gt;my Google Soc application&lt;/a&gt; to  Python Software Foundation got accepted. My mentor will be George D. Montana. Thank you G-SOC and PSF.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>soc</category><guid>http://www.xtoinfinity.com/posts/2007/04/12/soc-application-accepted.html</guid><pubDate>Thu, 12 Apr 2007 15:35:00 GMT</pubDate></item></channel></rss>