<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Senthil Kumaran (Posts about python)</title><link>http://www.xtoinfinity.com/</link><description></description><atom:link href="http://www.xtoinfinity.com/categories/python.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 21 Jun 2021 05:13:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>CPython moved to Github</title><link>http://www.xtoinfinity.com/posts/cpython-moved-to-github.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;CPython project moved it's source code hosting from self-hosted mercurial repository, at hg.python.org to Git
version control system hosted at Github. The new location of python project is &lt;a class="reference external" href="http://www.github.com/python/cpython"&gt;http://www.github.com/python/cpython&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is second big version control migration that is happening since I got involved. The first one was when
we moved from svn to mercurial. Branches were sub-optimal in svn and we used svn-merge.py to merge across
branches. Mercurial helped there and everyone got used to a distributed version control written in python,
mercurial. It was interesting for me personally to compare mercurial with the other popular DVCS, git.&lt;/p&gt;
&lt;p&gt;Over the years, Github has become popular place for developers to host their
projects. They have constantly improved their service offering. Many python
developers, got used to git version control system and found it's utility value too.&lt;/p&gt;
&lt;p&gt;Two years ago, it was decided that Python will move to Git and Github. The &lt;a class="reference external" href="https://paper.dropbox.com/doc/CPython-workflow-changes-mx1k8G6M0rg5JLy80F1r6"&gt;effort was led by
Bret Cannon&lt;/a&gt;  assisted by number of other developers and the migration happened on Feb 10, 2017.&lt;/p&gt;
&lt;p&gt;I helped with the migration too and helped with providing tool around converting the hg to git, using the facilities
available from hg-git mercurial plugin.&lt;/p&gt;
&lt;p&gt;We made use hg-git, and wrote some conversions scripts that could get us to the converted repo as we wanted.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/orsenthil/cpython-hg-to-git"&gt;https://github.com/orsenthil/cpython-hg-to-git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org/orsenthil/hg-git"&gt;https://bitbucket.org/orsenthil/hg-git&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that the migration is done, we are getting ourselves familiar to the new workflow.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://www.xtoinfinity.com/posts/cpython-moved-to-github.html</guid><pubDate>Mon, 20 Feb 2017 15:09:24 GMT</pubDate></item><item><title>Planning</title><link>http://www.xtoinfinity.com/posts/2013/03/05/planning.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Since I like CS and I have not really cracked the Subject Test, I wanted give it a try again. Then I thought I will go through all the aduni.org videos that I have not watched and I have always wanted to watch. Then my thoughts lead me to stuff like topcoder, which I have not competed in for a while and trying to improving my ranking.&lt;/p&gt;&lt;p&gt;But at last, when clearing my Python emails, I saw so much of pending work that has accumulated that I want to work only on Python in a planned manner and not on anything else.&lt;/p&gt;&lt;/div&gt;</description><category>Planning.</category><category>python</category><guid>http://www.xtoinfinity.com/posts/2013/03/05/planning.html</guid><pubDate>Wed, 06 Mar 2013 00:18:35 GMT</pubDate></item><item><title>Greedy vs Non-Greedy in Re - Good Example</title><link>http://www.xtoinfinity.com/posts/2008/12/28/greedy-vs-non-greedy-in-re-good-example.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Here is a good example to explain greedy vs, non-greedy search using module &lt;a href="http://docs.python.org/library/re.html"&gt;re&lt;/a&gt; in Python.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;*?, +?, ??&lt;/p&gt;
&lt;p&gt;The '&lt;em&gt;', '+', and '?' qualifiers are all greedy; they match as much text as possible. Sometimes this behaviour isn’t desired; if the RE  is matched against '&amp;lt;H1&amp;gt;title&amp;lt;/H1&amp;gt;', it will match the entire string, and not just '&amp;lt;H1&amp;gt;'. Adding '?' after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched. Using .&lt;/em&gt;? in the previous expression will match only '&amp;lt;H1&amp;gt;'.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://www.xtoinfinity.com/posts/2008/12/28/greedy-vs-non-greedy-in-re-good-example.html</guid><pubDate>Sun, 28 Dec 2008 16:47:00 GMT</pubDate></item><item><title>How identation works for Python programs?</title><link>http://www.xtoinfinity.com/posts/2008/05/29/how-identation-works-for-python-programs.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;It is well explained in &lt;a href="http://www.secnetix.de/~olli/Python/block_indentation.hawk"&gt;this article&lt;/a&gt;.&lt;br&gt;&lt;br&gt;It is the lexical analyzer that takes care of the indentation and not the python parser. Lexical analyzer maintains a stack for the indentation.&lt;br&gt;1) First for no indentation, it would stored 0 in the stack [0]&lt;br&gt;2) Next when any Indentation occurs, it denotes it by token INDENT and pushes the indent value to the stack[0]. Think of it as a beinging { brace in the C program. And if we visualized, the can be only one INDENT statement per line.&lt;br&gt;4) When de-indent occurs in a line, as many values are popped out of the stack as the new reduced indentation till the value on the top of the stack is equal to new indentation (if not equal, error) and for each value popped out a DEDENT token in written. (Like multiple end }} in C)&lt;br&gt;&lt;br&gt;A simple code like this&lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;pre&gt;&lt;br&gt;&lt;br&gt;if x:&lt;br&gt;   if true:&lt;br&gt;      print 'yes'&lt;br&gt;print 'end'&lt;br&gt;&lt;/pre&gt;&lt;br&gt;&lt;br&gt;Would be written as:&lt;br&gt;&lt;br&gt;&amp;lt;if&amp;gt;&amp;lt;x&amp;gt;&amp;lt;:&amp;gt;                           # Stack[0]&lt;br&gt;&amp;lt;INDENT&amp;gt;&amp;lt;if&amp;gt;&amp;lt;true&amp;gt;&amp;lt;:&amp;gt;  # Stack [0,4]&lt;br&gt;&amp;lt;INDENT&amp;gt;&amp;lt;print&amp;gt;&amp;lt;'&amp;gt;&amp;lt;yes&amp;gt;&amp;lt;'&amp;gt; # Stack [0,4,8]&lt;br&gt;&amp;lt;DEDENT&amp;gt;&amp;lt;DEDENT&amp;gt;&amp;lt;print&amp;gt;&amp;lt;'&amp;gt;&amp;lt;end&amp;gt;&amp;lt;'&amp;gt; #Stack[0]&lt;br&gt;&lt;br&gt;The parser would just consider the  as &amp;lt;INDENT&amp;gt; as { of the block and  &amp;lt;DEDENT&amp;gt;  as } of the block would be able to parse it as logical blocks.&lt;br&gt;&lt;br&gt;&lt;a href="http://www.secnetix.de/~olli/Python/block_indentation.hawk"&gt;That&lt;/a&gt; was a well written article again.&lt;/div&gt;</description><category>python</category><guid>http://www.xtoinfinity.com/posts/2008/05/29/how-identation-works-for-python-programs.html</guid><pubDate>Fri, 30 May 2008 02:02:00 GMT</pubDate></item><item><title>Lambda functions</title><link>http://www.xtoinfinity.com/posts/2007/11/14/lambda-functions.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;I often forget the syntax and usage of lambda functions, the following examples should help as a reminder.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; def function(x):&lt;/p&gt;
&lt;p&gt;...     return x*3&lt;/p&gt;
&lt;p&gt;... &lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; function(2)&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; func_with_lambda = lambda x: x*2&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; func_with_lambda(2)&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; (lambda x: x*2)(2)&lt;/p&gt;
&lt;p&gt;4&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>http://www.xtoinfinity.com/posts/2007/11/14/lambda-functions.html</guid><pubDate>Thu, 15 Nov 2007 01:42:00 GMT</pubDate></item><item><title>Soc application accepted</title><link>http://www.xtoinfinity.com/posts/2007/04/12/soc-application-accepted.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;wow! &lt;a href="http://code.google.com/soc/psf/appinfo.html?csaid=E73A6612F80229B6"&gt;my Google Soc application&lt;/a&gt; to  Python Software Foundation got accepted. My mentor will be George D. Montana. Thank you G-SOC and PSF.&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>soc</category><guid>http://www.xtoinfinity.com/posts/2007/04/12/soc-application-accepted.html</guid><pubDate>Thu, 12 Apr 2007 15:35:00 GMT</pubDate></item></channel></rss>