<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Senthil Kumaran (Posts about introduction)</title><link>http://www.xtoinfinity.com/</link><description></description><atom:link href="http://www.xtoinfinity.com/categories/introduction.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Mon, 21 Jun 2021 05:13:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Core Functional Programming Concepts</title><link>http://www.xtoinfinity.com/posts/core-functional-programming-concepts.html</link><dc:creator>Senthil Kumaran</dc:creator><description>&lt;div&gt;&lt;p&gt;Found this introductory post on &lt;a class="reference external" href="https://thesocietea.org/2016/12/core-functional-programming-concepts/"&gt;core functional programming concepts&lt;/a&gt; dealing with the subject succinctly.
It is easy to approach functional programming, if we can recognize the following concepts held true by all the
functional programs, and languages facilitating them.&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Functions are Pure&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No side-effects, like printing something from the function.&lt;/li&gt;
&lt;li&gt;When called with the same input, will always return the same output. We take that for granted, isn't it?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Functions are first-class and are of higher order.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Treat function names as variables.&lt;/li&gt;
&lt;li&gt;Toss function (names) as an argument to a function, and as a return value from a function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Variables are immutable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Forget mutating variables in a program. If you want an updated value, create a new variable. When you are
getting started with programming, you feel this is questionable. With experience under your belt, you start
to prefer immutability of variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Functions have referential transparency.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It follows from functions are pure requirement. The referential transparency requirement is about substituting
the function call with return value, wherever the function is called, should not change the state of the program.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Lambda Calculus&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The mathematics behind functional programming. Take arguments and have a return valued. When evaluating multiple
arguments, the function is evaluated one argument at a time, with result send to next one-arg-less function,
kind of a tail-recursion. This concept is called currying.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>introduction</category><guid>http://www.xtoinfinity.com/posts/core-functional-programming-concepts.html</guid><pubDate>Wed, 28 Dec 2016 02:04:16 GMT</pubDate></item></channel></rss>